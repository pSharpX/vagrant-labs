# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

require 'json'

dir = File.dirname(File.expand_path(__FILE__))
file = File.read("#{dir}/config.json")
data = JSON.parse(file)
vms = data['vms']

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  if data['box'].to_s != ''
    config.vm.box = "#{data['box']}"
  end

  if data['box_url'].to_s != ''
    config.vm.box_url = "#{data['box_url']}"
  end

  # config.vm.usable_port_range = (10200..10500)
  vms.each do |vm|
    config.vm.define "#{vm["name"]}" do |node|
      # node.vm.network "forwarded_port", guest: 8080, host: 8080, auto_correct: true
      # node.vm.network "private_network", type: "dhcp"
      node.vm.network "public_network"
      # node.vm.synced_folder "./repo", "/repo", create: true
      # node.vm.provision :shell, path: "build-web.sh"

      if vm['box'].to_s != ''
        node.vm.box = "#{vm['box']}"
      end
    
      if vm['box_url'].to_s != ''
        node.vm.box_url = "#{vm['box_url']}"
      end
    
      if vm['hostname'].to_s != ''
        node.vm.hostname = "#{vm['hostname']}"
      end
    
      if vm['network']['private_network'].to_s != ''
        node.vm.network "private_network", ip: "#{vm['network']['private_network']}"
      end
    
      vm['network']['forwarded_port'].each do |port|
        if port['guest'] != '' && port['host'] != ''
          node.vm.network :forwarded_port, guest: port['guest'].to_i, host: port['host'].to_i
        end
      end

      vm['synced_folder'].each do |folder|
        if folder['source'] != '' && folder['target'] != ''
          
          if !folder['mount_options'].nil? && !folder['mount_options'].empty?
            node.vm.synced_folder "#{folder['source']}", "#{folder['target']}", create: true, owner: folder['owner'], group: folder['group'], mount_options: ["dmode=775,fmode=600"]
          elsif !folder['owner'].nil? && !folder['owner'].empty?
              node.vm.synced_folder "#{folder['source']}", "#{folder['target']}", create: true, owner: folder['owner'], group: folder['group']
          elsif folder['create'] == true
            node.vm.synced_folder "#{folder['source']}", "#{folder['target']}", create: true
          else
            node.vm.synced_folder "#{folder['source']}", "#{folder['target']}"
          end

        end
      end

      if vm['chosen_provider'].empty? || vm['chosen_provider'] == "virtualbox"
        ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
        
        node.vm.provider :virtualbox do |vbox|
          vm['provider']['virtualbox']['modifyvm'].each do |option|
            if option["key"] == "natdnshostresolver1"
              value = value ? "on" : "off"
            end

            if !option["arg"].nil? && !option["arg"].empty?
              vbox.customize ["modifyvm", :id, "--#{option["key"]}", "#{option["value"]}", "#{option["arg"]}" ]
              next
            end

            vbox.customize ["modifyvm", :id, "--#{option["key"]}", "#{option["value"]}"]
          end
        end
      end

      vm['provision'].each do |key, value|
        if key == 'ansible_local'
          provision_ansible_local_option value, node
        end

        if key == 'shell' 
          if !value["inline"].nil? && !value["inline"].empty?
            node.vm.provision "shell", inline: value["inline"], args: value["args"]
          end

          if !value["path"].nil? && !value["path"].empty?
            provision_shell_option value, node
          end
        end
        

        if key == 'file'
          value.each do |file|
            node.vm.provision "file", source: file["source"], destination: file["destination"]
          end
        end
      end

    end

  end

  ssh_username = !data['ssh']['username'].nil? ? data['ssh']['username'] : "vagrant"

  if File.file?("./ssh/id_rsa")
    config.ssh.insert_key = false
    config.vm.provision "file", source: "./ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"

    config.ssh.private_key_path = [
      "./ssh/id_rsa",
      "./ssh/insecure_private_key"
    ]
  end

  if !data['ssh']['host'].nil?
    config.ssh.host = "#{data['ssh']['host']}"
  end
  if !data['ssh']['port'].nil?
    config.ssh.port = "#{data['ssh']['port']}"
  end
  if !data['ssh']['username'].nil?
    config.ssh.username = "#{data['ssh']['username']}"
  end
  if !data['ssh']['guest_port'].nil?
    config.ssh.guest_port = data['ssh']['guest_port']
  end
  if !data['ssh']['shell'].nil?
    config.ssh.shell = "#{data['ssh']['shell']}"
  end
  if !data['ssh']['keep_alive'].nil?
    config.ssh.keep_alive = data['ssh']['keep_alive']
  end
  if !data['ssh']['forward_agent'].nil?
    config.ssh.forward_agent = data['ssh']['forward_agent']
  end
  if !data['ssh']['forward_x11'].nil?
    config.ssh.forward_x11 = data['ssh']['forward_x11']
  end
  if !data['vagrant']['host'].nil?
    config.vagrant.host = data['vagrant']['host'].gsub(":", "").intern
  end

end

def provision_ansible_local_option (value, node)
  node.vm.provision :ansible_local do |ansible|
    if !value["playbook"].nil? && !value["playbook"].empty?
      ansible.playbook = value["playbook"]
    end

    if !value["install"].nil?
      ansible.install = value["install"]
    end

    if !value["verbose"].nil?
      ansible.verbose = value["verbose"]
    end

    if !value["install_mode"].nil? && !value["install_mode"].empty?
      ansible.install_mode = value["install_mode"]
    end

    if !value["pip_install_cmd"].nil? && !value["pip_install_cmd"].empty?
      ansible.pip_install_cmd = value["pip_install_cmd"]
    end

    if !value["version"].nil? && !value["version"].empty?
      ansible.version = value["version"]
    end

    if !value["inventory_path"].nil? && !value["inventory_path"].empty?
      ansible.inventory_path = value["inventory_path"]
    end

    if !value["limit"].nil? && !value["limit"].empty?
      ansible.limit = value["limit"]
    end
  end
end

def provision_shell_option (value, node)
  value["path"].each do |item|
    if !item["args"].nil?
      node.vm.provision "shell", path: item["path"], args: item["args"]
    else
      node.vm.provision "shell", path: item["path"]
    end
  end
end