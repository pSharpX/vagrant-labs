# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_PROJECT_NAME= ENV['APP_PROJECT_NAME']
VAGRANTFILE_ENV="dev"
VAGRANTFILE_API_VERSION = "2"
VAGRANTPLUGIN_DISKSIZE="vagrant-disksize"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  db_vm_ip = ENV['APP_DATABASE_HOST']
  db_vm_port = ENV.fetch('APP_DATABASE_PORT', 5432).to_i
  db_vm_name = "#{VAGRANTFILE_PROJECT_NAME}_db_#{VAGRANTFILE_ENV}_environment"
  
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
	
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # unless Vagrant.has_plugin?(VAGRANTPLUGIN_DISKSIZE)
  #   raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
  # end

  if Vagrant.has_plugin?(VAGRANTPLUGIN_DISKSIZE)
    config.disksize.size = '20GB'
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.define "db", autostart: false do |db|
    db.vm.hostname = 'db'
    db.vm.network "forwarded_port", guest: 3306, host: db_vm_port
    db.vm.network "private_network", ip: db_vm_ip
    db.vm.synced_folder "./data", "/data", create: true
    db.vm.provision :shell, path: "build-db.sh",
      env: {
        "APP_DATABASE_USER" => ENV['APP_DATABASE_USER'],
        "APP_DATABASE_PASS" => ENV['APP_DATABASE_PASS'],
        "APP_DATABASE_NAME" => ENV['APP_DATABASE_NAME'],
        "APP_DATABASE_PORT" => ENV['APP_DATABASE_PORT']
      }

    db.vm.provider "virtualbox" do |vb|
      vb.cpus = 2
      vb.memory = "1024"
      vb.name = db_vm_name
    end
  end

end